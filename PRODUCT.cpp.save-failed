#include <bits/stdc++.h>
#define forinc(i,a,b) for (int i = a ; i <= b ; i ++)
#define fordec(i,a,b) for (int i = a ; i >= b ; i --)
#define forv(j,u) for (int j = 0 ; j < u.size() ; j++)
#define pb push_back
#define pf push_front
#define fi first
#define se second
#define mk make_pair
#define pii pair<int,int>

template <class _T> bool maximize(_T &a , _T b) {return a < b ? a = b , 1 : 0 ; }
template <class _T> bool minimize(_T &a , _T b) {return a > b ? a = b , 1 : 0 ; }

const int ooit = 2e9 ;
const long long ooll = 1e15 ;

using namespace std ;

const int BASE = 10000 ;

int n , q ;
map<int,int> g ;

struct big_num{
    vector<int> a ;

    big_num(int s) {a.resize(s) ; }

    void convert_to_big_num(long long x) {
        while (x > 0) {
            a.push_back(x % BASE) ;
            x /= BASE ;
        }
    }

    void fix() {
        a.push_back(0) ;
        forinc(i,0,a.size() - 2) {
            a[i+1] += a[i] / BASE ; a[i] %= BASE ;
            if (a[i] < 0) a[i] += BASE , a[i+1] -- ;
        }
        while (a.size() >= 2 && a.back() == 0) a.pop_back() ;
    }

    big_num operator * (const big_num &b) {
        big_num c(a.size() + b.a.size()) ;
        forv(i,a) forv(j,b.a) c.a[i+j] = a[i] * b.a[j] ;
        return c.fix() , c ;
    }

    void operator += (const big_num &b) {
        a.resize(max(a.size() , b.a.size())) ;
        forv(i,b.a) a[i] += b.a[i] ; fix() ;
    }
};

void factories(int x){
    for (int i = 2 ; i <= (int) sqrt(x) ; i ++) if (x % i == 0) {
        int cnt = 0 ;
        while (x % i == 0) cnt ++ , x /= i ;
        g[i] += cnt ;
    }
    if (x > 1) g[x] ++ ;
}

void enter () {
    cin >> n >> q ;
    forinc(i,1,n) {
        int x ; cin >> x ;
        factories(x) ;
    }
}

vector<pii> a ;
int sumP = 1 , m ;

void prepare () {
    a.push_back({1,1}) ;
    for (auto tmp : g) a.push_back({tmp.fi , tmp.se}) , sumP += tmp.se ;
    m = a.size() - 1 ;
}

#define maxN 10005

long long f[maxN][maxN] ;

long long power(int x , int n) {
    if (n == 0) return 1 ;
    if (n == 1) return x ;
    long long tmp = power(x , n / 2) ;
    if (n % 2 == 0) return tmp * tmp ; return tmp * tmp * x ;
}

void dp () {
    f[0][0] = 1 ;

    forinc(i,0,m-1) forinc(j,0,sumP) if (f[i][j] > 0) {
        f[i+1][j] += f[i][j] ;
        forinc(k,1,a[i+1].se) if (j + k <= sumP) f[i+1][j+k] += f[i][j] * power(a[i+1].fi , k) ;
    }
}

void process () {
    prepare () ; dp () ;
    forinc(i,1,q) {
        int y = 0 ; cin >> y ;
        cout << f[m][y] << endl ;
    }
}

int main () {
    freopen("PRODUCT.inp" , "r" , stdin) ;
    //freopen("PRODUCT.out" , "w" , stdout) ;

    enter () ;
    //process () ;

    big_num a , b ;
    a.convert_to_big_num(100) ; b.convert_to_big_num(123);



    return 0 ;
}
